; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30723.0 

	TITLE	C:\Users\ivk737\Documents\Visual Studio 2013\Projects\Team6Project\EncryptData_Initial.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?encryptData@@YAHPADH@Z				; encryptData
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?gptrKey@@3PAEA:DWORD				; gptrKey
EXTRN	?gptrPasswordHash@@3PAEA:DWORD			; gptrPasswordHash
EXTRN	?gdebug1@@3EA:BYTE				; gdebug1
EXTRN	?gdebug2@@3EA:BYTE				; gdebug2
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\ivk737\documents\visual studio 2013\projects\team6project\encryptdata_initial.cpp
;	COMDAT ?encryptData@@YAHPADH@Z
_TEXT	SEGMENT
_resulti$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_data$ = 8						; size = 4
_dataLength$ = 12					; size = 4
?encryptData@@YAHPADH@Z PROC				; encryptData, COMDAT

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 12   : 	int resulti = 0;

  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _resulti$[ebp], 0

; 13   : 
; 14   : 	gdebug1 = 0;					// a couple of global variables that could be used for debugging

  0002f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?gdebug1@@3EA, 0 ; gdebug1

; 15   : 	gdebug2 = 0;					// also can have a breakpoint in C code

  00036	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?gdebug2@@3EA, 0 ; gdebug2

; 16   : 
; 17   : 	// You can not declare any local variables in C, but should use resulti to indicate any errors
; 18   : 	// Set up the stack frame and assign variables in assembly if you need to do so
; 19   : 	// access the parameters BEFORE setting up your own stack frame
; 20   : 	// Also, you cannot use a lot of global variables - work with registers
; 21   : 
; 22   : 	__asm {
; 23   : 		
; 24   : 		// you will need to reference some of these global variables
; 25   : 		// (gptrPasswordHash or gPasswordHash), (gptrKey or gkey), gNumRounds
; 26   : 
; 27   : 		mov esi, gptrPasswordHash // put the address of gPasswordHash into %esi

  0003d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gptrPasswordHash@@3PAEA ; gptrPasswordHash

; 28   : 		xor eax, eax //

  00043	33 c0		 xor	 eax, eax

; 29   : 		mov al, byte ptr[esi] // store gPassword[0] in %al

  00045	8a 06		 mov	 al, BYTE PTR [esi]

; 30   : 		shl ax,8 // left shift by 8 (multiply by 256)

  00047	66 c1 e0 08	 shl	 ax, 8

; 31   : 		xor ecx,ecx // set %ecx = 0

  0004b	33 c9		 xor	 ecx, ecx

; 32   : 		mov cl, byte ptr[esi + 1] // set %cx to gPassword[1]

  0004d	8a 4e 01	 mov	 cl, BYTE PTR [esi+1]

; 33   : 		add ax, cx // add gPassword[1] to ax, ax is now the starting index for key.dat

  00050	66 03 c1	 add	 ax, cx

; 34   : 					// ax = starting_index = gPasswordHash[0] * 256 + gPasswordHash[1]
; 35   : 
; 36   : 		xor ebx, ebx // %ebx = control variable (loop)

  00053	33 db		 xor	 ebx, ebx

; 37   : 		xor ecx,ecx

  00055	33 c9		 xor	 ecx, ecx

; 38   : 		mov ecx, dataLength // %ecx = length

  00057	8b 4d 0c	 mov	 ecx, DWORD PTR _dataLength$[ebp]

; 39   : 		cmp ecx, 0 // check that the length is not less than or equal to 0

  0005a	83 f9 00	 cmp	 ecx, 0

; 40   : 		sub ecx, 1 // ecx-- (file length is 1 less than previous)

  0005d	83 e9 01	 sub	 ecx, 1

; 41   : 		jbe lbl_EXIT_ZERO_LENGTH //

  00060	76 1b		 jbe	 SHORT $lbl_EXIT_ZERO_LENGTH$3

; 42   : 
; 43   : 		mov edi, data // put the address of first byte of data in %edi

  00062	8b 7d 08	 mov	 edi, DWORD PTR _data$[ebp]

; 44   : 		mov esi, gptrKey // put the address of gKey into %esi

  00065	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gptrKey@@3PAEA ; gptrKey
$lbl_LOOP$4:

; 45   : 
; 46   : 	//
; 47   : 	// LOOP THROUGH ENTIRE data[] BYTE BY BYTE
; 48   : 	//
; 49   : 		lbl_LOOP :
; 50   : 		mov dl, byte ptr[edi + ebx] //

  0006b	8a 14 1f	 mov	 dl, BYTE PTR [edi+ebx]

; 51   : 		xor dl, byte ptr[esi + eax] // data[ebx] = data[ebx] xor with keyfile[starting_index]

  0006e	32 14 06	 xor	 dl, BYTE PTR [esi+eax]

; 52   : 		mov byte ptr[edi + ebx], dl //

  00071	88 14 1f	 mov	 BYTE PTR [edi+ebx], dl

; 53   : 
; 54   : 		add ebx, 1 // increment %ebx by 1

  00074	83 c3 01	 add	 ebx, 1

; 55   : 		cmp ebx, ecx // if(ebx > ecx) { end loop }

  00077	3b d9		 cmp	 ebx, ecx

; 56   : 		ja lbl_EXIT_END //

  00079	77 07		 ja	 SHORT $lbl_EXIT_END$5

; 57   : 		jmp lbl_LOOP // else { loop }

  0007b	eb ee		 jmp	 SHORT $lbl_LOOP$4
$lbl_EXIT_ZERO_LENGTH$3:

; 58   : 
; 59   : 		lbl_EXIT_ZERO_LENGTH :
; 60   : 		sub ebx, 1 // decrement ebx to -1 to return failure

  0007d	83 eb 01	 sub	 ebx, 1

; 61   : 		jmp lbl_EXIT //

  00080	eb 02		 jmp	 SHORT $lbl_EXIT$6
$lbl_EXIT_END$5:

; 62   : 
; 63   : 		lbl_EXIT_END :
; 64   : 		xor ebx, ebx // ebx = 0, correctly executed

  00082	33 db		 xor	 ebx, ebx
$lbl_EXIT$6:

; 65   : 
; 66   : 		lbl_EXIT :
; 67   : 		mov resulti, ebx

  00084	89 5d f4	 mov	 DWORD PTR _resulti$[ebp], ebx

; 68   : 		
; 69   : 		
; 70   : 		/*// simple example that xors 2nd byte of data with 14th byte in the key file
; 71   : 		lea esi,gkey				// put the ADDRESS of gkey into esi
; 72   : 		mov esi,gptrKey;			// put the ADDRESS of gkey into esi (since *gptrKey = gkey)
; 73   : 
; 74   : 		lea	esi,gPasswordHash		// put ADDRESS of gPasswordHash into esi
; 75   : 		mov esi,gptrPasswordHash	// put ADDRESS of gPasswordHash into esi (since unsigned char *gptrPasswordHash = gPasswordHash)
; 76   : 
; 77   : 		mov al,byte ptr [esi]				// get first byte of password hash
; 78   : 		mov al,byte ptr [esi+4]				// get 5th byte of password hash
; 79   : 		mov ebx,2
; 80   : 		mov al,byte ptr [esi+ebx]			// get 3rd byte of password hash
; 81   : 		mov al,byte ptr [esi+ebx*2]			// get 5th byte of password hash
; 82   : 
; 83   : 		mov ax,word ptr [esi+ebx*2]			// gets 5th and 6th bytes of password hash ( gPasswordHash[4] and gPasswordHash[5] ) into ax
; 84   : 		mov eax,dword ptr [esi+ebx*2]		// gets 4 bytes, as in:  unsigned int X = *( (unsigned int*) &gPasswordHash[4] );
; 85   : 
; 86   : 		mov al,byte ptr [gkey+ebx]			// get's 3rd byte of gkey[] data
; 87   : 
; 88   : 		mov al,byte ptr [gptrKey+ebx]		// THIS IS INCORRECT - will add the address of the gptrKey global variable (NOT the value that gptrKey holds)
; 89   : 
; 90   : 		mov al,byte ptr [esi+0xd];			// access 14th byte in gkey[]: 0, 1, 2 ... d is the 14th byte
; 91   : 		mov edi,data				// Put ADDRESS of first data element into edi
; 92   : 		xor byte ptr [edi+1],al		// Exclusive-or the 2nd byte of data with the 14th element of the keyfile
; 93   : 									// NOTE: Keyfile[14] = 0x21, that value changes the case of a letter and flips the LSB
; 94   : 									// Capital "B" = 0x42 becomes lowercase "c" since 0x42 xor 0x21 = 0x63	*/
; 95   : 	}
; 96   : 
; 97   : 	return resulti;

  00087	8b 45 f4	 mov	 eax, DWORD PTR _resulti$[ebp]

; 98   : } // encryptData

  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	33 cd		 xor	 ecx, ebp
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
?encryptData@@YAHPADH@Z ENDP				; encryptData
_TEXT	ENDS
END
