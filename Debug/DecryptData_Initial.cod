; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30723.0 

	TITLE	C:\Users\ivk737\Documents\Visual Studio 2013\Projects\Team6Project\DecryptData_Initial.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?decryptData@@YAHPADH@Z				; decryptData
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?gptrKey@@3PAEA:DWORD				; gptrKey
EXTRN	?gptrPasswordHash@@3PAEA:DWORD			; gptrPasswordHash
EXTRN	?gdebug1@@3EA:BYTE				; gdebug1
EXTRN	?gdebug2@@3EA:BYTE				; gdebug2
EXTRN	?gDecodeTable@@3PAEA:BYTE			; gDecodeTable
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\ivk737\documents\visual studio 2013\projects\team6project\decryptdata_initial.cpp
;	COMDAT ?decryptData@@YAHPADH@Z
_TEXT	SEGMENT
_resulti$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_data$ = 8						; size = 4
_dataLength$ = 12					; size = 4
?decryptData@@YAHPADH@Z PROC				; decryptData, COMDAT

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 12   : 	int resulti = 0;

  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _resulti$[ebp], 0

; 13   : 
; 14   : 	gdebug1 = 0;					// a couple of global variables that could be used for debugging

  0002f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?gdebug1@@3EA, 0 ; gdebug1

; 15   : 	gdebug2 = 0;					// also can have a breakpoint in C code

  00036	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?gdebug2@@3EA, 0 ; gdebug2

; 16   : 
; 17   : 	// You can not declare any local variables in C, but should use resulti to indicate any errors
; 18   : 	// Set up the stack frame and assign variables in assembly if you need to do so
; 19   : 	// access the parameters BEFORE setting up your own stack frame
; 20   : 	// Also, you cannot use a lot of global variables - work with registers
; 21   : 	
; 22   : 	__asm {
; 23   : 
; 24   : 		// you will need to reference some of these global variables
; 25   : 		// (gptrPasswordHash or gPasswordHash), (gptrKey or gkey), gNumRounds
; 26   : 			mov esi, gptrPasswordHash;	put the address of gPasswordHash into esi

  0003d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gptrPasswordHash@@3PAEA ; gptrPasswordHash

; 27   : 			xor eax, eax

  00043	33 c0		 xor	 eax, eax

; 28   : 			mov al, byte ptr[esi];		store gPassword[0] in al

  00045	8a 06		 mov	 al, BYTE PTR [esi]

; 29   : 			shl ax, 8;					left shift by 8 (multiply by 256)

  00047	66 c1 e0 08	 shl	 ax, 8

; 30   : 			xor ecx, ecx;				set ecx = 0

  0004b	33 c9		 xor	 ecx, ecx

; 31   : 			mov cl, byte ptr[esi + 1];	set cx to gPassword[1]

  0004d	8a 4e 01	 mov	 cl, BYTE PTR [esi+1]

; 32   : 
; 33   : 			// ax = starting_index = gPasswordHash[0] * 256 + gPasswordHash[1]
; 34   : 			add ax, cx;					add gPassword[1] to ax, ax is now the starting index for the keyFile

  00050	66 03 c1	 add	 ax, cx

; 35   : 
; 36   : 			xor ebx, ebx;				ebx = control variable(loop)

  00053	33 db		 xor	 ebx, ebx

; 37   : 			xor ecx, ecx

  00055	33 c9		 xor	 ecx, ecx

; 38   : 			mov ecx, dataLength;		ecx = length

  00057	8b 4d 0c	 mov	 ecx, DWORD PTR _dataLength$[ebp]

; 39   : 			cmp ecx, 0;					check that the length is not less than or equal to 0

  0005a	83 f9 00	 cmp	 ecx, 0

; 40   : 			sub ecx, 1;					ecx-- (file length is 1 less than previous)

  0005d	83 e9 01	 sub	 ecx, 1

; 41   : 			jbe lbl_EXIT_ZERO_LENGTH

  00060	76 5b		 jbe	 SHORT $lbl_EXIT_ZERO_LENGTH$3

; 42   : 
; 43   : 			mov edi, data;				put the address of first byte of data in edi

  00062	8b 7d 08	 mov	 edi, DWORD PTR _data$[ebp]

; 44   : 			mov esi, gptrKey;			put the address of gKey into esi

  00065	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gptrKey@@3PAEA ; gptrKey
$lbl_LOOP$4:

; 45   : 	
; 46   : 			//
; 47   : 			// LOOP THROUGH ENTIRE data[] BYTE BY BYTE
; 48   : 			// At each step, data is load from the dl register and that step is performed on the data
; 49   : 			// The modified data is then loaded back into dl
; 50   : 		lbl_LOOP:
; 51   : 				// Get the current data
; 52   : 				mov dl, byte ptr[edi + ebx];	load the next byte from input file into dl

  0006b	8a 14 1f	 mov	 dl, BYTE PTR [edi+ebx]

; 53   : 
; 54   : 				// Free up the registers for use in Steps A - E
; 55   : 				push eax;	save keyFile index(0x917)

  0006e	50		 push	 eax

; 56   : 				push ebx;	save loop counter

  0006f	53		 push	 ebx

; 57   : 				push ecx;	save dataLength

  00070	51		 push	 ecx

; 58   : 
; 59   : 				// Part A reverse bit order
; 60   : 				xor ebx, ebx

  00071	33 db		 xor	 ebx, ebx

; 61   : 				mov cl, 0x08;	set counter to proper size

  00073	b1 08		 mov	 cl, 8

; 62   : 				mov ax, dx

  00075	66 8b c2	 mov	 ax, dx
$LOOP1$5:

; 63   : 			LOOP1:
; 64   : 				rcr ax, 1;		shift to the right, moving lsb to carry flag

  00078	66 d1 d8	 rcr	 ax, 1

; 65   : 				rcl bx, 1;		shift to the left, inserting from carry flag to lsb

  0007b	66 d1 d3	 rcl	 bx, 1

; 66   : 				dec cl

  0007e	fe c9		 dec	 cl

; 67   : 				cmp cl, 0

  00080	80 f9 00	 cmp	 cl, 0

; 68   : 				je END

  00083	74 02		 je	 SHORT $END$6

; 69   : 				jmp LOOP1

  00085	eb f1		 jmp	 SHORT $LOOP1$5
$END$6:

; 70   : 			END :
; 71   : 				mov edx, ebx;	reversed bits in ebx, copy to edx

  00087	8b d3		 mov	 edx, ebx

; 72   : 				//*/
; 73   : 				
; 74   : 				// Part C swap half nibbles
; 75   : 				mov eax, edx;		load data to be swapped in eax

  00089	8b c2		 mov	 eax, edx

; 76   : 				lea bl, [eax * 4];	shift data to the left 2 and save in bl

  0008b	66 8d 1c 85 00
	00 00 00	 lea	 bx, WORD PTR [eax*4]

; 77   : 				and bl, 0xCC;		masking to get indexes we want to swap eg. 1100 1100

  00093	80 e3 cc	 and	 bl, -52			; ffffffccH

; 78   : 				shr al, 2;			shift original data 2 to the right

  00096	c0 e8 02	 shr	 al, 2

; 79   : 				and al, 0x33;		mask remaining indexes eg. 0011 0011

  00099	24 33		 and	 al, 51			; 00000033H

; 80   : 				or al, bl;			combine and save in al

  0009b	0a c3		 or	 al, bl

; 81   : 				mov dl, al

  0009d	8a d0		 mov	 dl, al

; 82   : 				//*/
; 83   : 
; 84   : 				// Part E, swapping dl with the table value.
; 85   : 				mov dl, gDecodeTable[edx]

  0009f	8a 92 00 00 00
	00		 mov	 dl, BYTE PTR ?gDecodeTable@@3PAEA[edx]

; 86   : 				//*/
; 87   : 
; 88   : 				// Part B invert bits 0, 3, 6
; 89   : 				xor	dl, 0x49; bitMask = 0x49

  000a5	80 f2 49	 xor	 dl, 73			; 00000049H

; 90   : 				//*/
; 91   : 
; 92   : 				//Part D rotate 3 bits left
; 93   : 				rol dl, 3

  000a8	c0 c2 03	 rol	 dl, 3

; 94   : 				//*/
; 95   : 
; 96   : 				// Restore registers back to their previous states
; 97   : 				pop ecx;						restore dataLength

  000ab	59		 pop	 ecx

; 98   : 				pop ebx;						restore loop counter

  000ac	5b		 pop	 ebx

; 99   : 				pop eax;						restore keyFile index(0x917)

  000ad	58		 pop	 eax

; 100  : 				
; 101  : 				// XOR with the keyFile
; 102  : 				xor dl, byte ptr[esi + eax];	data[ebx] = data[ebx] xor with keyfile[starting_index]

  000ae	32 14 06	 xor	 dl, BYTE PTR [esi+eax]

; 103  : 				//*/
; 104  : 				
; 105  : 				// Save the modified data
; 106  : 				mov byte ptr[edi + ebx], dl;	replace the data in the array with the now-decrypted data

  000b1	88 14 1f	 mov	 BYTE PTR [edi+ebx], dl

; 107  : 				
; 108  : 				// LOOP control
; 109  : 				add ebx, 1;			increment loop counter by 1

  000b4	83 c3 01	 add	 ebx, 1

; 110  : 				cmp ebx, ecx;		if dataLength of the input file > loop counter, exit to lbl_EXIT

  000b7	3b d9		 cmp	 ebx, ecx

; 111  : 				ja lbl_EXIT_END

  000b9	77 07		 ja	 SHORT $lbl_EXIT_END$7

; 112  : 				jmp lbl_LOOP;		if dataLength < loop counter, jump back to lbl_LOOP

  000bb	eb ae		 jmp	 SHORT $lbl_LOOP$4
$lbl_EXIT_ZERO_LENGTH$3:

; 113  : 
; 114  : 			lbl_EXIT_ZERO_LENGTH :
; 115  : 				sub ebx, 1;		decrement ebx to - 1 to return failure

  000bd	83 eb 01	 sub	 ebx, 1

; 116  : 				jmp lbl_EXIT

  000c0	eb 02		 jmp	 SHORT $lbl_EXIT$8
$lbl_EXIT_END$7:

; 117  : 
; 118  : 			lbl_EXIT_END :
; 119  : 				xor ebx, ebx;	ebx = 0, correctly executed

  000c2	33 db		 xor	 ebx, ebx
$lbl_EXIT$8:

; 120  : 
; 121  : 			lbl_EXIT :
; 122  : 				mov resulti, ebx

  000c4	89 5d f4	 mov	 DWORD PTR _resulti$[ebp], ebx

; 123  : 		
; 124  : 		/*
; 125  : 		// simple example that xors 2nd byte of data with 14th byte in the key file
; 126  : 		lea esi,gkey				// put the ADDRESS of gkey into esi
; 127  : 		mov esi,gptrKey;			// put the ADDRESS of gkey into esi (since *gptrKey = gkey)
; 128  : 
; 129  : 		lea	esi,gPasswordHash		// put ADDRESS of gPasswordHash into esi
; 130  : 		mov esi,gptrPasswordHash	// put ADDRESS of gPasswordHash into esi (since unsigned char *gptrPasswordHash = gPasswordHash)
; 131  : 
; 132  : 		mov al,byte ptr [esi]				// get first byte of password hash
; 133  : 		mov al,byte ptr [esi+4]				// get 5th byte of password hash
; 134  : 		mov ebx,2
; 135  : 		mov al,byte ptr [esi+ebx]			// get 3rd byte of password hash
; 136  : 		mov al,byte ptr [esi+ebx*2]			// get 5th byte of password hash
; 137  : 
; 138  : 		mov ax,word ptr [esi+ebx*2]			// gets 5th and 6th bytes of password hash ( gPasswordHash[4] and gPasswordHash[5] ) into ax
; 139  : 		mov eax,dword ptr [esi+ebx*2]		// gets 4 bytes, as in:  unsigned int X = *( (unsigned int*) &gPasswordHash[4] );
; 140  : 
; 141  : 		mov al,byte ptr [gkey+ebx]			// get's 3rd byte of gkey[] data
; 142  : 
; 143  : 		mov al,byte ptr [gptrKey+ebx]		// THIS IS INCORRECT - will add the address of the gptrKey global variable (NOT the value that gptrKey holds)
; 144  : 
; 145  : 		mov al,byte ptr [esi+0xd];			// access 14th byte in gkey[]: 0, 1, 2 ... d is the 14th byte
; 146  : 		mov edi,data				// Put ADDRESS of first data element into edi
; 147  : 		xor byte ptr [edi+1],al		// Exclusive-or the 2nd byte of data with the 14th element of the keyfile
; 148  : 									// NOTE: Keyfile[14] = 0x21, that value changes the case of a letter and flips the LSB
; 149  : 									// Lowercase "c" = 0x63 becomes capital "B" since 0x63 xor 0x21 = 0x42 
; 150  : 		*/
; 151  : 	}
; 152  : 
; 153  : 	return resulti;

  000c7	8b 45 f4	 mov	 eax, DWORD PTR _resulti$[ebp]

; 154  : } // decryptData

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
?decryptData@@YAHPADH@Z ENDP				; decryptData
_TEXT	ENDS
END
